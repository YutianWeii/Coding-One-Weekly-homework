<!DOCTYPE html>
<html>
<head>
  	<style>
		body {
			margin: 0px;
			background-color: #2F4F4F;
			overflow: hidden;
		}
	</style>
     <script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">

</head>
<body>
	<script id="vertexShader" type="x-shader/x-vertex">
		void main() { gl_Position = vec4( position, 1.0 ); }
	</script>
	<script id="fragmentShader" type="x-shader/x-fragment">
		//============================================================
		//PUT YOUR GLSL CODE HERE
		//============================================================

 precision mediump float;
        
        uniform vec2 resolution;
        uniform vec2 mouse;
        uniform highp float time;
        #define M_PI 3.14159265358979323846 
        
        
        float line(vec2 normalised_Coordinate, float funct) {

// This if statement does the same job as the step function            
            //  if (normalised_Coordinate.y - funct < 0.001 && normalised_Coordinate.y - funct > 0.0) { 
                
            //     return normalised_Coordinate.y;
                
            //  } else {
                 
            //       return 0.;
            //  }

// So you might as well just use the step function to do the same thing.
// If you wanted a smooth line, you could use smoothstep.
           return step(funct,normalised_Coordinate.y)-step(funct,normalised_Coordinate.y-0.05);
        }
        
        
        
        
        void main(){
            
        	  vec2 pos = gl_FragCoord.xy/resolution;        
            float y = 0.5+ (sin(pos.x * time) * 0.5);
            vec3 color = vec3(y);
            
            // Plot a line
            float lines = line(pos,y);
            color = vec3(lines*abs(sin(time)),0.,0.);
            
            
            //my lines
            float One = sin(cos((1.- pos.x)* M_PI *2.)* time )* 2. ;
            float line1 = line (pos, One);
            vec3 lineOne = vec3(line1);
            
            float Two = cos(cos(pos.x * 4.)* time * mouse.x )* 0.5 + 0.5;
            float line2 = line (pos, Two);
            vec3 lineTwo = vec3(0.,line2 * 0.8,line2 );
            
            float Three = fract(pos.y * M_PI * 5.) * mouse.y ;
            float line3 = line (pos, Three);
            vec3 lineThree = vec3( line3 ,line3 ,0. );
            
            gl_FragColor = vec4( lineOne + lineTwo + lineThree, 1.0);
        }

	//============================================================
		//END OF GLSL CODE
		//============================================================
	</script>
	<script>
		//change the resolution here. 1 is highest
		var pixel_resolution = 2;
		var container, stats;
		var camera, scene, renderer;
		var uniforms;
		init();
		animate();
function init() { 
			camera = new THREE.Camera();
			camera.position.z = 1;
			scene = new THREE.Scene();
			var geometry = new THREE.PlaneBufferGeometry(2, 2);
			uniforms = { time: { type: 'f', value: 1.0 }, resolution: { type: 'v2', value: new THREE.Vector2() }, mouse: {type: "v2", value: new THREE.Vector2()}};
			var material = new THREE.ShaderMaterial({ uniforms: uniforms, vertexShader: document.getElementById('vertexShader').textContent, fragmentShader: document.getElementById('fragmentShader').textContent });
			var mesh = new THREE.Mesh(geometry, material);
			scene.add(mesh);
			renderer = new THREE.WebGLRenderer();
			//Hack here to change resolution 
			renderer.setPixelRatio(window.devicePixelRatio / pixel_resolution);
			document.body.appendChild(renderer.domElement);
			onWindowResize();
			window.addEventListener('resize', onWindowResize, false);
	        window.addEventListener('mousemove', onMouseMove, false);

		}
		function onWindowResize(event) {
			renderer.setSize(window.innerWidth, window.innerHeight);
			uniforms.resolution.value.x = renderer.domElement.width;
			uniforms.resolution.value.y = renderer.domElement.height;

		}
		function animate() {
			requestAnimationFrame(animate);
			render();
		}
		function onMouseMove( event ) {
        	uniforms.mouse.value.x = 2 * ( event.clientX / window.innerWidth );
 	        uniforms.mouse.value.y = 2 * ( 1-(event.clientY) / window.innerHeight
 	        );
        }
		function render() {
			uniforms.time.value += 0.01;
			renderer.render(scene, camera);
		}
	</script>
</body>
</html>
